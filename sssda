local uid = game.Players.LocalPlayer.UserId

    if 275929184 == uid then
        print("real")
        game.StarterGui:SetCore("SendNotification", {
            Title = "Whitelist:"; -- the title (ofc)
            Text = "Your Whitelisted!!!, - Join discord (discord.gg/p8anPj2zNZ)"; -- what the text says (ofc)
            Duration = 5; -- how long the notification should in secounds
            })
        if not game:IsLoaded() then
            repeat
                task.wait()
            until 
            game:IsLoaded()
         end
         
         local HttpService = game:GetService("HttpService")
         local Workspace = game:GetService("Workspace") 
         local plr = game:GetService("Players").LocalPlayer
         local RunService = game:GetService("RunService")
         local mouse = game.Players.LocalPlayer:GetMouse()
         local UserInputService = game:GetService("UserInputService")
         getgenv().savefilename = "Auto ability"..game.Players.LocalPlayer.Name..".json"
         
         function sex()
             -- reads jsonfile
             local jsonData = readfile(savefilename)
             local data = HttpService:JSONDecode(jsonData)
         
         --#region global values
             getgenv().Delay = data.Delay
             getgenv().Impact = data.Impact
             getgenv().Bomb = data.Bomb  
             getgenv().Loop = data.Loop
         end
         ---// updates the json file
         --#region update json
             function Updatejson()
         
                 local xdata = {
                    Delay = getgenv().Delay,
                    Impact = getgenv().Impact,
                    Bomb = getgenv().Bomb,
                    Loop = getgenv().Loop,
                 }
         
                 local json = HttpService:JSONEncode(xdata)
                 writefile(savefilename, json)
             end
         
             if isfile(savefilename) then 
         
                 local jsonData = readfile(savefilename)
                 local data = HttpService:JSONDecode(jsonData)
             
                 sex()
             
             else
             --#region CREATES JSON
                 local xdata = {
                     Delay = 1.2,
                     Impact = 490000,
                     Bomb = 1,
                     Loop = 2,
                 }
             
                 local json = HttpService:JSONEncode(xdata)
                 writefile(savefilename, json)
             
                 sex()
             --#endregion
             end
        
        
             local UIS=game:GetService'UserInputService'
        
        --//main
        
        local function Source()
            game:GetService("NetworkClient"):SetOutgoingKBPSLimit(math.huge)
            local function getmaxvalue(val)
               local mainvalueifonetable = tonumber(getgenv().Impact)
               if type(val) ~= "number" then
                   return nil
               end
               local calculateperfectval = (mainvalueifonetable/(val+2))
               return calculateperfectval
            end
             
            local function bomb(tableincrease, tries)
            local maintable = {}
            local spammedtable = {}
             
            table.insert(spammedtable, {})
            z = spammedtable[1]
             
            for i = 1, tableincrease do
                local tableins = {}
                table.insert(z, tableins)
                z = tableins
            end
             
            local calculatemax = getmaxvalue(tableincrease)
            local maximum
             
            if calculatemax then
                 maximum = calculatemax
                 else
                 maximum = 490000
            end
             
            for i = 1, maximum do
                 table.insert(maintable, spammedtable)
            end
             
            for i = 1, tries do
                 game.RobloxReplicatedStorage.SetPlayerBlockList:FireServer(maintable)
            end
            end
             
            bomb(tonumber(getgenv().Bomb),tonumber(getgenv().Loop)) --// change values if client crashes
        end
         
         
         local repo = 'https://raw.githubusercontent.com/wally-rblx/LinoriaLib/main/'
         
         local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
         local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
         local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()
         
         local Window = Library:CreateWindow({
            -- Set Center to true if you want the menu to appear in the center
            -- Set AutoShow to true if you want the menu to appear when it is created
            -- Position and Size are also valid options here
            -- but you do not need to define them unless you are changing them :)
         
            Title = 'Carti Hub - Lag Switch',
            Center = true, 
            AutoShow = true,
         })
         
         -- You do not have to set your tabs & groups up this way, just a prefrence.
         local Tabs = {
            -- Creates a new tab titled Main
            Main = Window:AddTab('Main'), 
            ['UI Settings'] = Window:AddTab('UI Settings'),
         }
         
         -- Groupbox and Tabbox inherit the same functions
         -- except Tabboxes you have to call the functions on a tab (Tabbox:AddTab(name))
         local LeftGroupBox = Tabs.Main:AddLeftGroupbox('Unit Ability Macros')
         
         LeftGroupBox:AddLabel('Settings')
        
        LeftGroupBox:AddSlider(
            '',
            {
              Text = 'Lag Delay:',
              Default = 1.2,
              Min = 0.1,
              Max = 5,
              Rounding = 1,
              Suffix = ' Second(s)',
              Compact = true, -- If set to true, then it will hide the label
            }
        ):OnChanged(
            function(t)
                getgenv().Delay = t
                Updatejson()
            end
        )
        LeftGroupBox:AddSlider(
            '',
            {
              Text = 'Lag Impact:',
              Default = getgenv().Impact or 490000,
              Min = 100000,
              Max = 490000,
              Rounding = 0,
              Suffix = ' Impact',
              Compact = true, -- If set to true, then it will hide the label
            }
        ):OnChanged(
            function(t)
                getgenv().Impact = t
                Updatejson()
            end
        )
        LeftGroupBox:AddSlider(
            '',
            {
              Text = 'Lag Bomb:',
              Default = getgenv().Bomb or 1,
              Min = 1,
              Max = 250,
              Rounding = 0,
              Suffix = ' Bomb',
              Compact = true, -- If set to true, then it will hide the label
            }
        ):OnChanged(
            function(t)
                getgenv().Bomb = t
                Updatejson()
            end
        )
        LeftGroupBox:AddSlider(
            '',
            {
              Text = 'Lag Loops:',
              Default = getgenv().Loop or 2,
              Min = 1,
              Max = 50,
              Rounding = 0,
              Suffix = ' Loop(s)',
              Compact = true, -- If set to true, then it will hide the label
            }
        ):OnChanged(
            function(t)
                getgenv().Loop = t
                Updatejson()
            end
        )
        
         LeftGroupBox:AddDivider()
        
         local anonmode = LeftGroupBox:AddButton('Anonymous Mode', function()
             game.Players.LocalPlayer.Character.Shirt:Destroy()
             game.Players.LocalPlayer.Character.Pants:Destroy()
             game.Players.LocalPlayer.Character.Head["_overhead"].Frame["Level_Frame"].Level.Text = "no no no"
             game.Players.LocalPlayer.Character.Head["_overhead"].Frame["Name_Frame"]["Name_Text"].Text = "Anonymous"
             game.Players.LocalPlayer.Character.Head["_overhead"].Frame.TitleFrame["Title_Text"].Text = "LeaderBoard Ez"
               for i,v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
                 if v:IsA("Accessory") then 
                     v:Destroy()
                 end
               end
           end)

           LeftGroupBox:AddDivider()

         LeftGroupBox:AddLabel('There Is A Box In The Top Left That Displays The State Of The Lag',true)
        
         LeftGroupBox:AddToggle(
            '',
            {
                Text = 'Auto Lag',
                Default = false, -- If getgenv().autousepors2 does not exist (nil), then the default will be false
                Tooltip = 'Turn This On To Lag The Game And Make Eniemies Slowers'
            }
        ):OnChanged(
            function(t) -- value returned
                if getgenv().Toggled then
                    getgenv().Toggled = t
                    warn'Disabled!'
                    Library:SetWatermark('Disabled!')
                elseif not getgenv().Toggled then
                    getgenv().Toggled = t
                    warn'Enabled!'
                    Library:SetWatermark('Enabled!')
                    while getgenv().Toggled do
                        Source()
                        task.wait(getgenv().Delay)
                    end
                end
            end
        )
        
        Library:SetWatermarkVisibility(true)
        Library:SetWatermark('Disabled!')
        
        LeftGroupBox:AddDivider()

        LeftGroupBox:AddLabel('You Can Also Press "p" To Toggle the Lag',true)
        getgenv().KeyBind = "p"
        UIS.InputBegan:Connect(function(Key)
            if Key.KeyCode==Enum.KeyCode[getgenv().KeyBind:upper()] and not UIS:GetFocusedTextBox() then
                if getgenv().Toggled then
                    getgenv().Toggled=false
                    warn'Disabled!'
                    Library:SetWatermark('Disabled!')
                elseif not getgenv().Toggled then
                    getgenv().Toggled=true
                    warn'Enabled!'
                    Library:SetWatermark('Enabled!')
                    while getgenv().Toggled do
                        Source()
                        task.wait(getgenv().Delay)
                    end
                end
            end
         end)

         
         local MenuGroup = Tabs['UI Settings']:AddLeftGroupbox('Menu')
         
         -- I set NoUI so it does not show up in the keybinds menu
         MenuGroup:AddButton('Unload', function() Library:Unload() end)
         MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'End', NoUI = true, Text = 'Menu keybind' }) 
         
         Library.ToggleKeybind = Options.MenuKeybind -- Allows you to have a custom keybind for the menu
         
         -- Addons:
         -- SaveManager (Allows you to have a configuration system)
         -- ThemeManager (Allows you to have a menu theme system)
         
         -- Hand the library over to our managers
         ThemeManager:SetLibrary(Library)
         SaveManager:SetLibrary(Library)
         
         -- Ignore keys that are used by ThemeManager. 
         -- (we dont want configs to save themes, do we?)
         SaveManager:IgnoreThemeSettings() 
         
         -- Adds our MenuKeybind to the ignore list 
         -- (do you want each config to have a different menu key? probably not.)
         SaveManager:SetIgnoreIndexes({ 'MenuKeybind' }) 
         
         -- use case for doing it this way: 
         -- a script hub could have themes in a global folder
         -- and game configs in a separate folder per game
         ThemeManager:SetFolder('MyScriptHub')
         SaveManager:SetFolder('MyScriptHub/specific-game')
         
         -- Builds our config menu on the right side of our tab
         SaveManager:BuildConfigSection(Tabs['UI Settings']) 
         
         -- Builds our theme menu (with plenty of built in themes) on the left side
         -- NOTE: you can also call ThemeManager:ApplyToGroupbox to add it to a specific groupbox
         ThemeManager:ApplyToTab(Tabs['UI Settings'])
         
         -- You can use the SaveManager:LoadAutoloadConfig() to load a config 
         -- which has been marked to be one that auto loads!
    end
