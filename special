    local repo = 'https://raw.githubusercontent.com/wally-rblx/LinoriaLib/main/'

    local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
    local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
    local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()

    local Window = Library:CreateWindow({
        -- Set Center to true if you want the menu to appear in the center
        -- Set AutoShow to true if you want the menu to appear when it is created
        -- Position and Size are also valid options here
        -- but you do not need to define them unless you are changing them :)

        Title = 'Carti Hub Special üçÜ üçë üí¶',
        Center = true, 
        AutoShow = true,
    })

    -- You do not have to set your tabs & groups up this way, just a prefrence.
    local Tabs = {
        -- Creates a new tab titled Main
        Main = Window:AddTab('Main'), 
        ['UI Settings'] = Window:AddTab('UI Settings'),
    }

    -- Groupbox and Tabbox inherit the same functions
    -- except Tabboxes you have to call the functions on a tab (Tabbox:AddTab(name))
    local LeftGroupBox = Tabs.Main:AddLeftGroupbox('Main Stuff')
    local nGroupBox = Tabs.Main:AddLeftGroupbox('Other Stuff')

    local MyButton = LeftGroupBox:AddButton('Copy Job Id', function()
        setclipboard(game.JobId)
    end)

    -- Tabboxes are a tiny bit different, but here's a basic example:
    --[[

    local TabBox = Tabs.Main:AddLeftTabbox() -- Add Tabbox on left side

    local Tab1 = TabBox:AddTab('Tab 1')
    local Tab2 = TabBox:AddTab('Tab 2')

    -- You can now call AddToggle, etc on the tabs you added to the Tabbox
    ]]

    -- Groupbox:AddToggle
    -- Arguments: Index, Options
    LeftGroupBox:AddToggle('AutoRejointoggle', {
        Text = 'Auto Rejoin Same Server',
        Default = true, -- Default value (true / false)
        Tooltip = 'Turn This On To ReJoin The Same Public Server', -- Information shown when you hover over the toggle
    })

    nGroupBox:AddToggle('friporjoin', {
        Text = 'Auto Rejoin Friends Portal',
        Default = true, -- Default value (true / false)
        Tooltip = 'Turn This On To Join Portals That Your Friend Opens', -- Information shown when you hover over the toggle
    })

    nGroupBox:AddToggle('friporjoinown', {
        Text = 'Auto Rejoin Any Portal',
        Default = true, -- Default value (true / false)
        Tooltip = 'Turn This On To Join Portals That Anyone Opens', -- Information shown when you hover over the toggle
    })

    Toggles.AutoRejointoggle:OnChanged(function()
        getgenv().autoleave = Toggles.AutoRejointoggle.Value
    end)

    Toggles.friporjoin:OnChanged(function()
        getgenv().autojoinpors = Toggles.friporjoin.Value
    end)

    Toggles.friporjoinown:OnChanged(function()
        getgenv().autojoinporsnop = Toggles.friporjoinown.Value
    end)

    -- This should print to the console: "My toggle state changed! New value: false"
    Toggles.AutoRejointoggle:SetValue(false)


    LeftGroupBox:AddInput('MyTextbox', {
        Default = '',
        Numeric = false, -- true / false, only allows numbers
        Finished = true, -- true / false, only calls callback when you press enter

        Text = 'JobId',
        Tooltip = 'Paste JobId (Server To Rejoin)', -- Information shown when you hover over the textbox

        Placeholder = 'JobId Here', -- placeholder text when the box is empty
        -- MaxLength is also an option which is the max length of the text
    })

    Options.MyTextbox:OnChanged(function()
        getgenv().jobid = tostring(Options.MyTextbox.Value)
    end)

    nGroupBox:AddInput('MyTextbox2', {
        Default = '',
        Numeric = false, -- true / false, only allows numbers
        Finished = true, -- true / false, only calls callback when you press enter

        Text = 'Friend username',
        Tooltip = 'Paste Friends Username (Will Join Portal Of That User)', -- Information shown when you hover over the textbox

        Placeholder = 'Username Here', -- placeholder text when the box is empty
        -- MaxLength is also an option which is the max length of the text
    })

    Options.MyTextbox2:OnChanged(function()
        getgenv().friend = tostring(Options.MyTextbox2.Value)
    end)

    Library:SetWatermarkVisibility(true)
    Library:SetWatermark('Suck My Dick Faggots')

    Library:OnUnload(function()
        print('Unloaded!')
        Library.Unloaded = true
    end)

    coroutine.resume(coroutine.create(function()
        local GameFinished = game:GetService("Workspace"):WaitForChild("_DATA"):WaitForChild("GameFinished")
        GameFinished:GetPropertyChangedSignal("Value"):Connect(function()
            print("Changed", GameFinished.Value == true)
            if GameFinished.Value == true then
                repeat task.wait() until  game:GetService("Players").LocalPlayer.PlayerGui.ResultsUI.Enabled == true
                task.wait()
                if getgenv().autoleave then
                    game:GetService("TeleportService"):TeleportToPlaceInstance(8304191830, getgenv().jobid, LocalPlayer)
                end
            end
        end)
    end))

    task.spawn(function()
        while task.wait() do
            if getgenv().autojoinpors == true then
                for _, v in next, game:GetService("Workspace")["_PORTALS"].Lobbies:GetChildren() do
                    if tostring(v.Owner.Value) == tostring(getgenv().friend) then 
                        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_join_lobby:InvokeServer(tostring(v))
                    end
                end
            end
        end
    end)

    task.spawn(function()
        while task.wait() do
            if getgenv().autojoinporsnop == true then
                for _, v in next, game:GetService("Workspace")["_PORTALS"].Lobbies:GetChildren() do
                    if tostring(v.Owner.Value) ~= "nil" then 
                        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_join_lobby:InvokeServer(tostring(v))
                    end
                end
            end
        end
    end)

    -- UI Settings
    local MenuGroup = Tabs['UI Settings']:AddLeftGroupbox('Menu')

    -- I set NoUI so it does not show up in the keybinds menu
    MenuGroup:AddButton('Unload', function() Library:Unload() end)
    MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'End', NoUI = true, Text = 'Menu keybind' }) 

    Library.ToggleKeybind = Options.MenuKeybind -- Allows you to have a custom keybind for the menu

    -- Addons:
    -- SaveManager (Allows you to have a configuration system)
    -- ThemeManager (Allows you to have a menu theme system)

    -- Hand the library over to our managers
    ThemeManager:SetLibrary(Library)
    SaveManager:SetLibrary(Library)

    -- Ignore keys that are used by ThemeManager. 
    -- (we dont want configs to save themes, do we?)
    SaveManager:IgnoreThemeSettings() 

    -- Adds our MenuKeybind to the ignore list 
    -- (do you want each config to have a different menu key? probably not.)
    SaveManager:SetIgnoreIndexes({ 'MenuKeybind' }) 

    -- use case for doing it this way: 
    -- a script hub could have themes in a global folder
    -- and game configs in a separate folder per game
    ThemeManager:SetFolder('Cartihub')
    SaveManager:SetFolder('CartihubLinUI/AnimeAdventures')

    -- Builds our config menu on the right side of our tab
    SaveManager:BuildConfigSection(Tabs['UI Settings']) 

    -- Builds our theme menu (with plenty of built in themes) on the left side
    -- NOTE: you can also call ThemeManager:ApplyToGroupbox to add it to a specific groupbox
    ThemeManager:ApplyToTab(Tabs['UI Settings'])

    -- You can use the SaveManager:LoadAutoloadConfig() to load a config 
    -- which has been marked to be one that auto loads!
